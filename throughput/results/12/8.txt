BEGIN;
BEGIN
EXPLAIN (ANALYZE, BUFFERS)
select
	o_year,
	sum(case
		when nation = 'BRAZIL' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AMERICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'LARGE BRUSHED NICKEL'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2166961.87..2166963.69 rows=730 width=38) (actual time=26282.230..26282.231 rows=2 loops=1)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   Sort Method: quicksort  Memory: 25kB
   Buffers: shared hit=783543 read=219366 dirtied=1082 written=38176
   ->  HashAggregate  (cost=2166914.38..2166927.15 rows=730 width=38) (actual time=26282.135..26282.136 rows=2 loops=1)
         Buffers: shared hit=783540 read=219366 dirtied=1082 written=38176
         ->  Nested Loop  (cost=497719.29..2166429.26 rows=24256 width=38) (actual time=19469.746..26230.505 rows=24128 loops=1)
               Buffers: shared hit=783540 read=219366 dirtied=1082 written=38176
               ->  Nested Loop  (cost=497719.29..2159511.45 rows=24256 width=16) (actual time=19469.687..26109.693 rows=24128 loops=1)
                     Buffers: shared hit=735284 read=219366 dirtied=1082 written=38176
                     ->  Hash Join  (cost=497719.29..2152440.46 rows=24282 width=16) (actual time=19469.634..25858.491 rows=24128 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Buffers: shared hit=662770 read=219366 dirtied=1082 written=38176
                           ->  Nested Loop  (cost=0.00..1652475.79 rows=400511 width=16) (actual time=0.486..5209.072 rows=399378 loops=1)
                                 Buffers: shared hit=262868 read=205906 dirtied=1082 written=38176
                                 ->  Index Only Scan using part_p_type_p_partkey_idx on part  (cost=0.00..46164.77 rows=13273 width=4) (actual time=0.405..214.554 rows=13299 loops=1)
                                       Index Cond: (p_type = 'LARGE BRUSHED NICKEL'::text)
                                       Heap Fetches: 13299
                                       Buffers: shared hit=2 read=11392 written=2020
                                 ->  Index Scan using lineitem_l_partkey_l_quantity_l_shipmode_idx on lineitem  (cost=0.00..120.71 rows=31 width=20) (actual time=0.035..0.363 rows=30 loops=13299)
                                       Index Cond: (l_partkey = part.p_partkey)
                                       Buffers: shared hit=262866 read=194514 dirtied=1082 written=36156
                           ->  Hash  (cost=486283.49..486283.49 rows=914864 width=8) (actual time=19467.779..19467.779 rows=910359 loops=1)
                                 Buckets: 131072  Batches: 1  Memory Usage: 35561kB
                                 Buffers: shared hit=399899 read=13460
                                 ->  Hash Join  (cost=136579.33..486283.49 rows=914864 width=8) (actual time=4099.758..18915.392 rows=910359 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       Buffers: shared hit=399899 read=13460
                                       ->  Bitmap Heap Scan on orders  (cost=97548.71..420950.53 rows=4574321 width=12) (actual time=2854.058..6651.184 rows=4557140 loops=1)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             Buffers: shared hit=254787 read=12634
                                             ->  Bitmap Index Scan on orders_o_orderdate_o_orderkey_idx  (cost=0.00..96405.13 rows=4574321 width=0) (actual time=2751.009..2751.009 rows=4584480 loops=1)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Buffers: shared read=12634
                                       ->  Hash  (cost=35280.62..35280.62 rows=300000 width=4) (actual time=1245.072..1245.072 rows=299436 loops=1)
                                             Buckets: 32768  Batches: 1  Memory Usage: 10528kB
                                             Buffers: shared hit=145112 read=826
                                             ->  Nested Loop  (cost=906.17..35280.62 rows=300000 width=4) (actual time=38.523..1061.132 rows=299436 loops=1)
                                                   Buffers: shared hit=145112 read=826
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.047..0.105 rows=5 loops=1)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         Buffers: shared hit=2
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.008..0.022 rows=25 loops=1)
                                                               Buffers: shared hit=1
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.022..0.022 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               Buffers: shared hit=1
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.018..0.019 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
                                                                     Buffers: shared hit=1
                                                   ->  Bitmap Heap Scan on customer  (cost=905.09..6455.63 rows=60000 width=8) (actual time=30.314..192.894 rows=59887 loops=5)
                                                         Recheck Cond: (c_nationkey = n1.n_nationkey)
                                                         Buffers: shared hit=145110 read=826
                                                         ->  Bitmap Index Scan on customer_c_nationkey_c_custkey_idx  (cost=0.00..890.09 rows=60000 width=0) (actual time=20.437..20.437 rows=59887 loops=5)
                                                               Index Cond: (c_nationkey = n1.n_nationkey)
                                                               Buffers: shared hit=8 read=826
                     ->  Index Scan using pk_supplier on supplier  (cost=0.00..0.28 rows=1 width=8) (actual time=0.009..0.009 rows=1 loops=24128)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
                           Buffers: shared hit=72514
               ->  Index Scan using pk_nation on nation n2  (cost=0.00..0.27 rows=1 width=30) (actual time=0.003..0.003 rows=1 loops=24128)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
                     Buffers: shared hit=48256
 Total runtime: 26294.022 ms
(64 rows)

COMMIT;
COMMIT
